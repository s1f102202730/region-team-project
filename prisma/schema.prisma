generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extentions = [vector()]
}

model User {
  id                Int              @id @default(autoincrement())
  password          String
  role              String
  createdAt         DateTime         @default(now()) @map("created_at")
  username          String           @unique @map("username")
  
  // 逆リレーションを追加
  touristProfiles   TouristProfile[]
  municipalityProfiles MunicipalityProfile[]
  reviews           Review[]
  
  @@map("users")
}

model TouristSpot {
  id                Int               @id @default(autoincrement())
  name              String            // 観光地の名前
  location          String            // 観光地の位置情報や説明
  reviews Review[]
}

model TouristProfile {
  id            String   @id @default(uuid())
  userId        Int      @unique   // データ型をIntに変更
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoriteSpots String[]
  travelHistory String[]
}

model MunicipalityProfile {
  id                String   @id @default(uuid())
  userId            Int      @unique   // データ型をIntに変更
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  municipalityName  String
}


model Review {
  id                Int         @id @default(autoincrement())
  userId            Int         // ユーザーのID
  user              User        @relation(fields: [userId], references: [id])
  touristSpotId     Int         // 観光地のID
  touristSpot       TouristSpot @relation(fields: [touristSpotId], references: [id])

  overallSatisfaction Int      // 全体満足度 (1-5などの評価)
  infrastructure      Int      // インフラ(トイレ、Wi-Fi、駐車場など)の充実度
  safety              Int      // 観光地の治安
  accessibility       Int      // アクセスの利便性
  serviceQuality      Int      // 施設・サービスの質
  regionalCharm       Int      // 地域としての魅力
  informationAccess   Int      // 情報の入手しやすさ
  revisitIntent       Int      // また訪れたいと思うか (1-5などの評価)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Memo {
  id         String          @id @default(uuid())
  content    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  embeddings Embedding[]
}

model Memo {
  id                 Int          @id @default(autoincrement())
  content            String
  embeddings         Embedding[]
}

model Embedding {
  id                 Int       @id @default(autoincrement())
  memoId             Int
  memo               Memo    @relation(fields: [memoId], references: [id], onDelete: Cascade)
  content            String
  vector             Unsupported("vector") // pgvectorで定義されるvector typeのデータ
}