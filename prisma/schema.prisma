generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector()]
}

model User {
  id                   Int                  @id @default(autoincrement())
  password             String
  role                 String
  createdAt            DateTime             @default(now()) @map("created_at")
  username             String               @unique @map("username")
  prefecture           String?
  
  municipalityProfiles MunicipalityProfile?
  reviews              Review[]
  touristProfiles      TouristProfile?

  @@map("users")
}

model TouristSpot {
  id            Int     @id @default(autoincrement())
  name          String?
  access        String?
  address       String?
  availableDays String?
  endTime       String?
  explanation   String?
  latitude      Int?
  longitude     Int?
  startTime     String?
  embeddings    Embedding[]
}

model TouristProfile {
  id            String   @id @default(uuid())
  userId        Int      @unique
  favoriteSpots String[]
  travelHistory String[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MunicipalityProfile {
  userId           Int      @unique
  municipalityName String
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review           Review[]
}

model Review {
  id                  Int                 @id @default(autoincrement())
  userId              Int
  touristSpotId       Int
  overallSatisfaction Int
  infrastructure      Int
  safety              Int
  accessibility       Int
  serviceQuality      Int
  regionalCharm       Int
  informationAccess   Int
  revisitIntent       Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  touristSpot         MunicipalityProfile @relation(fields: [touristSpotId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
}

model Embedding{
  id                  Int                 @id @default(autoincrement())
  touristSpotId       Int
  touristSpot         TouristSpot    @relation(fields: [touristSpotId], references: [id], onDelete: Cascade)
  content             String
  vector              Unsupported("vector")
}